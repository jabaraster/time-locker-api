AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Time Locker Analyzer
Globals:
  Function:
    Timeout: 60
Parameters:
  evernoteToken:
    Type: String
  evernoteConsumerKey:
    Type: String
  evernoteConsumerSecret:
    Type: String

Resources:

  ################################
  # API Resources
  ################################
  EvernoteWebhook:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.evernoteWebhookEndpoint
      Runtime: nodejs10.x
      Environment:
        Variables:
          ARMAMENT_EXTRACTER_LAMBDA_NAME: !Ref ArmamentsExtracter
          EVERNOTE_TOKEN: !Ref evernoteToken
          EVERNOTE_CONSUMER_KEY: !Ref evernoteConsumerKey
          EVERNOTE_CONSUMER_SECRET: !Ref evernoteConsumerSecret
          PLAY_RESULT_BUCKET: !Ref PlayResultBucket
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ArmamentsExtracter
        - RekognitionDetectOnlyPolicy: {}
        - S3CrudPolicy:
            BucketName: !Ref PlayResultBucket
        - SESCrudPolicy:
            IdentityName: jabara.info
      Events:
        EvernoteWebhookGet:
          Type: Api
          Properties:
            Path: /evernote-webhook
            Method: get

  EvernoteNoteAnalyzer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.analyzeEvernoteNoteApi
      Runtime: nodejs10.x
      Environment:
        Variables:
          ARMAMENT_EXTRACTER_LAMBDA_NAME: !Ref ArmamentsExtracter
          EVERNOTE_TOKEN: !Ref evernoteToken
          EVERNOTE_CONSUMER_KEY: !Ref evernoteConsumerKey
          EVERNOTE_CONSUMER_SECRET: !Ref evernoteConsumerSecret
          PLAY_RESULT_BUCKET: !Ref PlayResultBucket
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ArmamentsExtracter
        - RekognitionDetectOnlyPolicy: {}
        - S3CrudPolicy:
            BucketName: !Ref PlayResultBucket
      Events:
        EvernoteNoteAnalyzerGet:
          Type: Api
          Properties:
            Path: /evernote/note/analyzer
            Method: get

  ScreenShotAnalyzer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.analyzeScreenShotApi
      Runtime: nodejs10.x
      Environment:
        Variables:
          ARMAMENT_EXTRACTER_LAMBDA_NAME: !Ref ArmamentsExtracter
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ArmamentsExtracter
        - RekognitionDetectOnlyPolicy: {}
      Events:
        ScreenShotAnalyzerPost:
          Type: Api
          Properties:
            Path: /screen-shot/analyzer
            Method: post

  ScreenShotAnalyzerTestPage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.screenShotAnalyzerTestPage
      Runtime: nodejs10.x
      Events:
        ScreenShotAnalyzerTestPageGet:
          Type: Api
          Properties:
            Path: /ui/screen-shot/analyzer
            Method: get

  GetScorePerArmlevel:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.getScorePerArmlevel
      Runtime: nodejs10.x
      Environment:
        Variables:
          PLAY_RESULT_BUCKET: !Ref PlayResultBucket
          ATHENA_RESULT_BUCKET: !Ref AthenaResultBucket
      Role: !GetAtt AthenaExecutionRole.Arn
      Events:
        GetScorePerArmlevelApi:
          Type: Api
          Properties:
            Path: /arms/score-per-level
            Method: get

  AthenaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
          - Effect: Allow
            Principal:
              Service: athena.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: AthenaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: "Allow"
              Action: "athena:*"
              Resource: "*"
            - Effect: "Allow"
              Action: "glue:*"
              Resource: "*"
            - Effect: "Allow"
              Action: "s3:*"
              Resource: "*"

  ################################
  # API
  ################################
  CharacterListApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.getCharacterList
      Runtime: nodejs10.x
      Environment:
        Variables:
          PLAY_RESULT_BUCKET: !Ref PlayResultBucket
          ATHENA_RESULT_BUCKET: !Ref AthenaResultBucket
      Role: !GetAtt AthenaExecutionRole.Arn
      Events:
        GetCharacterList:
          Type: Api
          Properties:
            Path: /api/character/
            Method: get

  ScoreRankingApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.getScoreRanking
      Runtime: nodejs10.x
      Environment:
        Variables:
          PLAY_RESULT_BUCKET: !Ref PlayResultBucket
          ATHENA_RESULT_BUCKET: !Ref AthenaResultBucket
      Role: !GetAtt AthenaExecutionRole.Arn
      Events:
        GetScoreRanking:
          Type: Api
          Properties:
            Path: /api/score-ranking/
            Method: get

  CharacterSummaryApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.getCharacterSummary
      Runtime: nodejs10.x
      Environment:
        Variables:
          PLAY_RESULT_BUCKET: !Ref PlayResultBucket
          ATHENA_RESULT_BUCKET: !Ref AthenaResultBucket
      Role: !GetAtt AthenaExecutionRole.Arn
      Events:
        GetCharacterList:
          Type: Api
          Properties:
            Path: /api/character/{characterName}
            Method: get

  TotalPlayStateApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.getTotalPlayState
      Runtime: nodejs10.x
      Environment:
        Variables:
          PLAY_RESULT_BUCKET: !Ref PlayResultBucket
          ATHENA_RESULT_BUCKET: !Ref AthenaResultBucket
      Role: !GetAtt AthenaExecutionRole.Arn
      Events:
        GetTotalPlayState:
          Type: Api
          Properties:
            Path: /api/total-play-state/
            Method: get

  DailyPlayResultApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.getDailyPlayResult
      Runtime: nodejs10.x
      Environment:
        Variables:
          PLAY_RESULT_BUCKET: !Ref PlayResultBucket
          ATHENA_RESULT_BUCKET: !Ref AthenaResultBucket
      Role: !GetAtt AthenaExecutionRole.Arn
      Events:
        GetDailyPlayResultApi:
          Type: Api
          Properties:
            Path: /api/daily-play-result/
            Method: get

  ################################
  # for SPA
  ################################
  HomePage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.homePage
      Runtime: nodejs10.x
      Events:
        GetHomePage:
          Type: Api
          Properties:
            Path: /
            Method: get
  HomePage2:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.homePage
      Runtime: nodejs10.x
      Events:
        GetHomePage2:
          Type: Api
          Properties:
            Path: /character/{characterName}
            Method: get
  HomePage3:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.homePage
      Runtime: nodejs10.x
      Events:
        GetHomePage3:
          Type: Api
          Properties:
            Path: /score-ranking
            Method: get
  HomePage4:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.homePage
      Runtime: nodejs10.x
      Events:
        GetHomePage4:
          Type: Api
          Properties:
            Path: /daily-play-result
            Method: get

  ################################
  # Lambda Resource
  ################################
  ArmamentsExtracter:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: time-locker-python/
      Handler: app.extract_armaments
      Runtime: python3.7
  Patch:
    Type: AWS::Serverless::Function
    Timeout: 900
    Properties:
      CodeUri: time-locker-nodejs/
      Handler: index.patch
      Runtime: nodejs10.x
      Environment:
        Variables:
          PLAY_RESULT_BUCKET: !Ref PlayResultBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref PlayResultBucket

  ################################
  # S3 Resource
  ################################
  PlayResultBucket:
    Type: AWS::S3::Bucket
  AthenaResultBucket:
    Type: AWS::S3::Bucket

  ################################
  # Glue Resources
  ################################
  MyRole: # ここのサンプルまま: https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-glue-crawler.html#cfn-glue-crawler-role
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"

  TimeLockerDatabase:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Name: time-locker
      CatalogId: !Ref AWS::AccountId

  PlayResultCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !GetAtt MyRole.Arn
      DatabaseName: !Ref TimeLockerDatabase
      Targets:
        S3Targets:
          - Path: !Ref PlayResultBucket